    //<MLS_FRAGMENT_GI_BLEND_REFLECTION_PROBES>
    // Original Code"
    //d.probeHDR[0] = unity_SpecCube0_HDR;
    //d.probeHDR[1] = unity_SpecCube1_HDR;
	
    // Magic Lightmap Switcher
    Unity_GlossyEnvironmentData mls_g = UnityGlossyEnvironmentSetup(s.smoothness, -s.eyeVec, s.normalWorld, s.specColor);

    UNITY_BRANCH
    if (_MLS_ENABLE_REFLECTIONS_BLENDING)
    {
        switch (_MLS_ReflectionsFlag)
        {
        case 0:
            d.probeHDR[0] = BlendTwoCubeTextures(
            2,
            reflect(s.eyeVec, s.normalWorld),
            MLS_GlossyEnvironment(mls_g));

        //d.probeHDR[1] = BlendTwoCubeTextures(
        //    1,
        //    reflect(s.eyeVec, s.normalWorld),
        //    MLS_GlossyEnvironment(mls_g));
            break;
        case 1:
            d.probeHDR[0] = BlendTwoCubeTextures(
                0,
                reflect(s.eyeVec, s.normalWorld),
                MLS_GlossyEnvironment(mls_g));

            d.probeHDR[1] = BlendTwoCubeTextures(
                1,
                reflect(s.eyeVec, s.normalWorld),
                MLS_GlossyEnvironment(mls_g));
            break;
        case 2:
            d.probeHDR[0] = BlendTwoCubeTextures(
                0,
                reflect(s.eyeVec, s.normalWorld),
                MLS_GlossyEnvironment(mls_g)) + 
                BlendTwoCubeTextures(
                    2,
                    reflect(s.eyeVec, s.normalWorld),
                    MLS_GlossyEnvironment(mls_g));

            d.probeHDR[1] = BlendTwoCubeTextures(
                1,
                reflect(s.eyeVec, s.normalWorld),
                MLS_GlossyEnvironment(mls_g)) + 
                BlendTwoCubeTextures(
                    2,
                    reflect(s.eyeVec, s.normalWorld),
                    MLS_GlossyEnvironment(mls_g));
            break;
        }
    }
    else
    {
        d.probeHDR[0] = unity_SpecCube0_HDR;
        d.probeHDR[1] = unity_SpecCube1_HDR;
    }
    //</MLS_FRAGMENT_GI_BLEND_REFLECTION_PROBES>