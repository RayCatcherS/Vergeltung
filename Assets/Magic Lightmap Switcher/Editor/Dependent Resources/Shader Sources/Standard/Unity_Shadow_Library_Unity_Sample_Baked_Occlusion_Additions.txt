    //<MLS_UNITY_SHADOW_LIBRARY_UNITY_SAMPLE_BAKED_OCCLUSION_ADDITIONS>
    // Original Code
    //#if defined (SHADOWS_SHADOWMASK)
        //#if defined(LIGHTMAP_ON)
        //    fixed4 rawOcclusionMask = UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy);
        //#else
        //    fixed4 rawOcclusionMask = fixed4(1.0, 1.0, 1.0, 1.0);
        //    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
        //        if (unity_ProbeVolumeParams.x == 1.0)
        //            rawOcclusionMask = LPPV_SampleProbeOcclusion(worldPos);
        //        else
        //            rawOcclusionMask = UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy);
        //    #else
        //        rawOcclusionMask = UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy);
        //    #endif
        //#endif
        //return saturate(dot(rawOcclusionMask, unity_OcclusionMaskSelector));

    // Magic Lightmap Switcher
    #if defined (SHADOWS_SHADOWMASK)
        #if defined(LIGHTMAP_ON)
            fixed4 rawOcclusionMask = lerp(
                UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy), 
                BlendTwoTextures(2, lightmapUV.xy), 
                _MLS_ENABLE_LIGHTMAPS_BLENDING);
        #else
            fixed4 rawOcclusionMask = fixed4(1.0, 1.0, 1.0, 1.0);
            #if UNITY_LIGHT_PROBE_PROXY_VOLUME
                if (unity_ProbeVolumeParams.x == 1.0)
                    rawOcclusionMask = LPPV_SampleProbeOcclusion(worldPos);
                else
                    rawOcclusionMask = UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy);
            #else
                rawOcclusionMask = lerp(
                    UNITY_SAMPLE_TEX2D(unity_ShadowMask, lightmapUV.xy), 
                    BlendTwoTextures(2, lightmapUV.xy), 
                    _MLS_ENABLE_LIGHTMAPS_BLENDING);
            #endif
        #endif
        return saturate(dot(rawOcclusionMask, unity_OcclusionMaskSelector));
    //</MLS_UNITY_SHADOW_LIBRARY_UNITY_SAMPLE_BAKED_OCCLUSION_ADDITIONS>