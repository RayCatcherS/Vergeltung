    //<MLS_LIGHTING_GLOSSY_ENVIRONMENT_REFLECTION_ADDITIONS>
    // Original Code
    //#if !defined(_ENVIRONMENTREFLECTIONS_OFF)
    //    half mip = PerceptualRoughnessToMipmapLevel(perceptualRoughness);
    //    half4 encodedIrradiance = SAMPLE_TEXTURECUBE_LOD(unity_SpecCube0, samplerunity_SpecCube0, reflectVector, mip);
    //
    //#if !defined(UNITY_USE_NATIVE_HDR)
    //    half3 irradiance = DecodeHDREnvironment(encodedIrradiance, unity_SpecCube0_HDR);
    //#else
    //    half3 irradiance = encodedIrradiance.rbg;
    //#endif
    //
    //    return irradiance * occlusion;
    //#endif // GLOSSY_REFLECTIONS
    
    // Magic Lightmap Switcher
    half4 encodedIrradiance;
    half3 irradiance;

#if !defined(_ENVIRONMENTREFLECTIONS_OFF)
    half mip = PerceptualRoughnessToMipmapLevel(perceptualRoughness);

    encodedIrradiance = lerp(
        SAMPLE_TEXTURECUBE_LOD(unity_SpecCube0, samplerunity_SpecCube0, reflectVector, mip),
        BlendTwoCubeTextures(0, reflectVector, mip),
        _MLS_ENABLE_REFLECTIONS_BLENDING);    

#if !defined(UNITY_USE_NATIVE_HDR)
    irradiance = DecodeHDREnvironment(encodedIrradiance, unity_SpecCube0_HDR);
#else
    encodedIrradiance = lerp(
        SAMPLE_TEXTURECUBE_LOD(unity_SpecCube0, samplerunity_SpecCube0, reflectVector, mip),
        BlendTwoCubeTextures(0, reflectVector, mip),
        _MLS_ENABLE_REFLECTIONS_BLENDING);
#endif
    //</MLS_LIGHTING_GLOSSY_ENVIRONMENT_REFLECTION_ADDITIONS>