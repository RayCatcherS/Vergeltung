using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace MagicLightmapSwitcher
{
    public class MLSManager : EditorWindow
    {
        public enum StorageType
        {
            FullScene,
            ObjectsGroup
        }

        public enum StorePath
        {
            SceneReleative,
            Custom
        }

        public enum LightmapType
        {
            Color,
            Directional,
            Shadowmask,
            BakeryRNM0,
            BakeryRNM1,
            BakeryRNM2,
            BakeryVolume0,
            BakeryVolume1,
            BakeryVolume2,
            BakeryVolumeMask,
            BakeryVolumeCompressed
        }
        
        private static string[] blendingModules = 
        {
            "Lightmaps",
            "Reflections",
            "Skybox",
            "Light Probes",
#if BAKERY_INCLUDED
            "Bakery Volumes",
#endif
            "Light Sources",
            "Custom Blendables",
            "Objects Data",
            "Environment"
        };

        List<MagicLightmapSwitcher> magicLightmapSwitchers = new List<MagicLightmapSwitcher>();       

        public static MagicLightmapSwitcher.Workflow workflow;
        public static MagicLightmapSwitcher.Workflow lastWorkflow;
        public static MagicLightmapSwitcher activeSwitcherInstance;        

        public static int selectedScene;
        public int lastSelectedScene;
        public static int selectedTab;
        public static string targetScenario;
        public static StorageType storageType;
        public static StorePath storePath;
        public static string customPath;

        public static MLSManager managerWindow;        
        public static bool clearDefaultDataFolder;
        public int endCycleMapIndex;
        public bool orderChanged;
        public GameObject objectsGroup;
        public List<int> objectGroupLightmapIndices;        
        public bool createLightmapScenario;
        public static int scenarioToChange; 
        private static List<string> storedScenarios = new List<string>();

        public string lightmapName;
        public Vector2 objectsGroupScrollPosition;        
        public string lightingPresetName;

        private static List<string> scenes = new List<string>();
        private bool sceneIsUnloaded;
        private static Vector2 scenariosScrollPosition;
        private static bool shadersChecked;
        private bool lastClearDefaultDataFolderValue;
        private static bool initialized;

        [MenuItem("Tools/Magic Tools/Magic Lightmap Switcher/MLS Manager", priority = 0)]
        static void Init()
        {
            managerWindow = (MLSManager) GetWindow(typeof(MLSManager), false, "MLS Manager");
            managerWindow.minSize = new Vector2(200 * EditorGUIUtility.pixelsPerPoint, 150 * EditorGUIUtility.pixelsPerPoint);
            managerWindow.Show();

            EditorApplication.update -= CheckState;
            EditorApplication.update += CheckState;

            initialized = true;
        }

        [MenuItem("Tools/Magic Tools/Magic Lightmap Switcher/Clear All Data...", priority = 2)]
        public static void ClearAllPluginData()
        {
            if (EditorUtility.DisplayDialog("Magic Lightmap Switcher",
                "Delete all data generated by MLS? This includes clearing script objects " +
                "in the scene and removing all saved lightmaps as well as scenarios. This action is irreversible. Proceed? ", "Yes", "No"))
            {
                activeSwitcherInstance = null;
                int objectsToDestroyCount = 0;

                List<MagicLightmapSwitcher> magicLightmapSwitchers = new List<MagicLightmapSwitcher>(FindObjectsOfType<MagicLightmapSwitcher>());

                for (int m = 0; m < magicLightmapSwitchers.Count; m++)
                {
                    for (int i = 0; i < magicLightmapSwitchers[m].sceneLightmapScenarios.Count; i++)
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(magicLightmapSwitchers[m].sceneLightmapScenarios[i]));
                    }

                    magicLightmapSwitchers[m].sceneLightmapScenarios.Clear();

                    for (int i = 0; i < magicLightmapSwitchers[m].sceneLightmapDatas.Count; i++)
                    {
                        RemoveStoredLightmapData(magicLightmapSwitchers[m].sceneLightmapDatas[i]);
                    }

                    magicLightmapSwitchers[m].sceneLightmapDatas.Clear();
                    DestroyImmediate(magicLightmapSwitchers[m].gameObject);
                }

                MLSLight[] mLSLights = FindObjectsOfType<MLSLight>();

                objectsToDestroyCount = mLSLights.Length;

                for (int i = 0; i < objectsToDestroyCount; i++)
                {
                    DestroyImmediate(mLSLights[i]);
                }

                MLSStaticRenderer[] mLSStaticRenderers = FindObjectsOfType<MLSStaticRenderer>();

                objectsToDestroyCount = mLSStaticRenderers.Length;

                for (int i = 0; i < objectsToDestroyCount; i++)
                {
                    DestroyImmediate(mLSStaticRenderers[i]);
                }

                MLSDynamicRenderer[] mLSDynamicRenderers = FindObjectsOfType<MLSDynamicRenderer>();

                objectsToDestroyCount = mLSDynamicRenderers.Length;

                for (int i = 0; i < objectsToDestroyCount; i++)
                {
                    DestroyImmediate(mLSDynamicRenderers[i]);
                }

                MLSCustomBlendable[] mLSCustomBlendables = FindObjectsOfType<MLSCustomBlendable>();

                objectsToDestroyCount = mLSCustomBlendables.Length;

                for (int i = 0; i < objectsToDestroyCount; i++)
                {
                    DestroyImmediate(mLSCustomBlendables[i]);
                }
                
                DestroyImmediate(GameObject.Find("MLS Deferred Prepass"));
            }
        }

        void OnInspectorUpdate()
        {
            Repaint();
        }   

        public static void RemoveStoredLightmapData(StoredLightmapData storedLightmapData)
        {
            for (int i = 0; i < storedLightmapData.sceneLightingData.lightmapsLight.Length; i++)
            {
                string asset = AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsLight[i]);

                if (!string.IsNullOrEmpty(asset))
                {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsLight[i]));
                }
            }

            for (int i = 0; i < storedLightmapData.sceneLightingData.lightmapsDirectional.Length; i++)
            {
                string asset = AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsDirectional[i]);

                if (!string.IsNullOrEmpty(asset))
                {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsDirectional[i]));
                }
            }

            for (int i = 0; i < storedLightmapData.sceneLightingData.lightmapsShadowmask.Length; i++)
            {
                string asset = AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsShadowmask[i]);

                if (!string.IsNullOrEmpty(asset))
                {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.lightmapsShadowmask[i]));
                }
            }

            for (int i = 0; i < storedLightmapData.sceneLightingData.reflectionProbes.cubeReflectionTexture.Length; i++)
            {
                string asset = AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.reflectionProbes.cubeReflectionTexture[i]);

                if (!string.IsNullOrEmpty(asset))
                {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.reflectionProbes.cubeReflectionTexture[i]));
                }
            }

            for (int i = 0; i < storedLightmapData.sceneLightingData.skyboxReflectionTexture.Length; i++)
            {
                string asset = AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.skyboxReflectionTexture[i]);

                if (!string.IsNullOrEmpty(asset))
                {
                    AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData.sceneLightingData.skyboxReflectionTexture[i]));
                }
            }
            
#if BAKERY_INCLUDED
            if (storedLightmapData.sceneLightingData.lightmapsBakeryRNM0 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.lightmapsBakeryRNM0)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.lightmapsBakeryRNM1 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.lightmapsBakeryRNM1)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.lightmapsBakeryRNM2 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.lightmapsBakeryRNM2)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture0 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture0)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture1 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture1)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture2 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture2)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture3 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture3)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }

            if (storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture4 != null)
            {
                foreach (var t in storedLightmapData.sceneLightingData.bakeryVolumes.volumeTexture4)
                {
                    string asset = AssetDatabase.GetAssetPath(t);

                    if (!string.IsNullOrEmpty(asset))
                    {
                        AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(t));
                    }
                }
            }
#endif

            AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(storedLightmapData));
        }

        public static void RemoveStoredLightingScenario(int removeIndex)
        {
            StoredLightingScenario scenarioToRmove = activeSwitcherInstance.availableScenarios[removeIndex];

            if (activeSwitcherInstance == null)
            {
                activeSwitcherInstance = RuntimeAPI.GetSwitcherInstanceStatic(scenarioToRmove.targetScene);
            }

            if (activeSwitcherInstance.workflow == MagicLightmapSwitcher.Workflow.MultiScene)
            {
                activeSwitcherInstance.storedLightmapScenarios.Remove(scenarioToRmove.prefix);
            }
            else
            {
                activeSwitcherInstance.sceneLightmapScenarios.Remove(scenarioToRmove);
            }

            activeSwitcherInstance.OnBlendingValueChanged[removeIndex].RemoveAllListeners();
            activeSwitcherInstance.OnLoadedLightmapChanged[removeIndex].RemoveAllListeners();

            activeSwitcherInstance.OnBlendingValueChanged.RemoveAt(removeIndex); 
            activeSwitcherInstance.OnLoadedLightmapChanged.RemoveAt(removeIndex);

            AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(scenarioToRmove));
        }

        private void SetActiveSwitcher()
        {
            magicLightmapSwitchers.Clear();

            magicLightmapSwitchers.AddRange(FindObjectsOfType<MagicLightmapSwitcher>());

            for (int i = 0; i < magicLightmapSwitchers.Count; i++)
            {
                if (magicLightmapSwitchers[i] == null)
                {
                    magicLightmapSwitchers.Clear();
                    return;
                }
            }

            for (int i = 0; i < magicLightmapSwitchers.Count; i++)
            {
                if (magicLightmapSwitchers[i].gameObject.scene.name == SceneManager.GetActiveScene().name)
                {
                    activeSwitcherInstance = magicLightmapSwitchers[i];  

                    switch (storePath)
                    {
                        case StorePath.SceneReleative:
                            activeSwitcherInstance.currentDataPath =
                                EditorSceneManager.GetActiveScene().path.Split(new string[] { ".unity" }, System.StringSplitOptions.None)[0] + "/" + EditorSceneManager.GetActiveScene().name + "_MLS_DATA";
                            break;
                        case StorePath.Custom:
                            activeSwitcherInstance.currentDataPath = "Assets/" + customPath;
                            break;
                    }

                    break;
                }
                else
                {
                    activeSwitcherInstance = null;
                }
            }
        }

        private void OnDestroy()
        {
            EditorApplication.update -= CheckState;
        }

        public static void CheckState()
        {
            if (activeSwitcherInstance == null)
            {
                return;
            }

            if (selectedScene > SceneManager.sceneCount)
            {
                selectedScene = 0;
            }

            if (Lightmapping.isRunning)
            {
                if (activeSwitcherInstance.currentBlendingState != MagicLightmapSwitcher.BlendingOptions.None)
                {
                    activeSwitcherInstance.SetBlendingOptionsGlobal(MagicLightmapSwitcher.BlendingOptions.None);
                }

                if (activeSwitcherInstance.workflow == MagicLightmapSwitcher.Workflow.MultiScene)
                {
                    activeSwitcherInstance.staticAffectedObjects.Remove(EditorSceneManager.GetSceneAt(selectedScene).name);
                }
                else
                {
                    if (activeSwitcherInstance.sceneStaticAffectedObjects.Count > 0)
                    {
                        activeSwitcherInstance.sceneStaticAffectedObjects.Clear();
                    }
                }
            }
            else if (activeSwitcherInstance.availableScenarios.Count == 0)
            {
                activeSwitcherInstance.SetBlendingOptionsGlobal(MagicLightmapSwitcher.BlendingOptions.None);
            }

            if (!Application.runInBackground)
            {
                Application.runInBackground = true;
            }
        }        

        void OnGUI()
        {
            if (Application.isPlaying)
            {
                selectedTab = 1;
            }
            
            if (!initialized)
            {
                Init();
            }

            scenes.Clear();

            for (int i = 0; i < SceneManager.sceneCount; i++)
            {
                if (string.IsNullOrEmpty(SceneManager.GetSceneAt(i).name))
                {
                    scenes.Add("Untitled");
                }
                else
                {
                    scenes.Add(SceneManager.GetSceneAt(i).name);
                }
            }

            if (lastSelectedScene != selectedScene)
            {
                if (EditorSceneManager.GetSceneAt(selectedScene).isLoaded)
                {
                    lastSelectedScene = selectedScene;
                    EditorSceneManager.SetActiveScene(EditorSceneManager.GetSceneAt(selectedScene));
                }
            }

            if (!sceneIsUnloaded)
            {
                for (int i = 0; i < SceneManager.sceneCount; i++)
                {
                    if (EditorSceneManager.GetActiveScene() == EditorSceneManager.GetSceneAt(i))
                    {
                        selectedScene = i;
                    }
                }
            }

            SetActiveSwitcher();

            if (activeSwitcherInstance == null)
            {
#if BAKERY_INCLUDED
                if (ftRenderLightmap.bakeInProgress)
                {
                    EditorGUILayout.HelpBox("Waiting for the Bakery to finish baking the scene...", MessageType.Warning);
                }
                else
                {
                    DrawNoInstanceWarning();
                }
#else
                DrawNoInstanceWarning();
#endif
                return;
            }

            storedScenarios.Clear();
            storedScenarios.Add("-None-");

            for (int i = 0; i < activeSwitcherInstance.availableScenarios.Count; i++)
            {
                if (activeSwitcherInstance.availableScenarios[i] != null)
                {
                    if (workflow == MagicLightmapSwitcher.Workflow.MultiScene)
                    {
                        if (activeSwitcherInstance.availableScenarios[i].name.Contains(EditorSceneManager.GetActiveScene().name))
                        {
                            storedScenarios.Add(activeSwitcherInstance.availableScenarios[i].name);
                        }
                    }
                    else
                    {
                        storedScenarios.Add(activeSwitcherInstance.availableScenarios[i].name);
                    }
                }
                else
                {
                    activeSwitcherInstance.availableScenarios.RemoveAt(i);
                    return;
                }
            }

            MLSEditorUtils.InitStyles();

            selectedTab = GUILayout.Toolbar(selectedTab, new string[] { "Storing", "Switching/Blending" });

            switch (selectedTab)
            {
                case 0:
                    if (MLSLightmapDataStoring.bakingLightingData || MLSLightmapDataStoring.bakingLightingDataQueue)
                    {
                        EditorGUILayout.HelpBox("Access to settings is locked while baking and storing lightmaps.", MessageType.Warning);
                    }
                    else
                    {
                        using (new GUILayout.VerticalScope(GUI.skin.box))
                        {
#if BAKERY_INCLUDED
                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(
                                    MLSTooltipManager.MainComponent.GetParameter("Lightmapper", MLSTooltipManager.MainComponent.Tabs.Storing),
                                    GUILayout.MinWidth(200));
                                activeSwitcherInstance.lightmapper = (MagicLightmapSwitcher.Lightmapper)
                                    EditorGUILayout.EnumPopup(activeSwitcherInstance.lightmapper, GUILayout.MaxWidth(250));
                            }
#endif
                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(
                                    MLSTooltipManager.MainComponent.GetParameter("Workflow", MLSTooltipManager.MainComponent.Tabs.Storing),
                                    GUILayout.MinWidth(200));
                                activeSwitcherInstance.workflow = (MagicLightmapSwitcher.Workflow)
                                    EditorGUILayout.EnumPopup(activeSwitcherInstance.workflow, GUILayout.MaxWidth(250));

                                if (SceneManager.sceneCount == 1)
                                {
                                    activeSwitcherInstance.workflow = MagicLightmapSwitcher.Workflow.SingleScene;
                                }

                                if (activeSwitcherInstance.lastWorkflow != activeSwitcherInstance.workflow)
                                {
                                    magicLightmapSwitchers.Clear();
                                    SetActiveSwitcher();

                                    activeSwitcherInstance.lastWorkflow = activeSwitcherInstance.workflow;

                                    if (activeSwitcherInstance != null)
                                    {
                                        activeSwitcherInstance.StartCoroutine(activeSwitcherInstance.UpdateStoredArray(SceneManager.GetSceneAt(selectedScene).name, true));
                                    }
                                }
                            }

                            if (activeSwitcherInstance.workflow == MagicLightmapSwitcher.Workflow.MultiScene)
                            {
                                using (new GUILayout.HorizontalScope())
                                {
                                    GUILayout.Label(
                                        MLSTooltipManager.MainComponent.GetParameter("Active Scene", MLSTooltipManager.MainComponent.Tabs.Storing),
                                        GUILayout.MinWidth(200));
                                    selectedScene = EditorGUILayout.Popup(selectedScene, scenes.ToArray(), GUILayout.MaxWidth(250));

                                    if (lastSelectedScene != selectedScene)
                                    {
                                        magicLightmapSwitchers.Clear();

                                        if (SceneManager.GetSceneAt(selectedScene).isLoaded)
                                        {
                                            sceneIsUnloaded = false;

                                            SetActiveSwitcher();

                                            if (activeSwitcherInstance != null)
                                            {
                                                activeSwitcherInstance.StartCoroutine(activeSwitcherInstance.UpdateStoredArray(SceneManager.GetSceneAt(selectedScene).name, true));
                                            }
                                        }
                                        else
                                        {
                                            lastSelectedScene = selectedScene;
                                            sceneIsUnloaded = true;
                                        }
                                    }
                                }
                            }

                            if (sceneIsUnloaded)
                            {
                                EditorGUILayout.HelpBox(
                                    "Scene \"" + EditorSceneManager.GetSceneAt(selectedScene).name + "\", " +
                                    "which is part of the saved data set, has not been loaded.", MessageType.Error, true);

                                if (GUILayout.Button("Load " + EditorSceneManager.GetSceneAt(selectedScene).name))
                                {
                                    EditorSceneManager.OpenScene(EditorSceneManager.GetSceneAt(selectedScene).path, OpenSceneMode.Additive);
                                    EditorSceneManager.SetActiveScene(EditorSceneManager.GetSceneAt(selectedScene));
                                    lastSelectedScene = -1;
                                    sceneIsUnloaded = false;
                                }

                                return;
                            }

                            if (activeSwitcherInstance == null)
                            {
                                DrawNoInstanceWarning();
                                return;
                            }

                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(
                                    MLSTooltipManager.MainComponent.GetParameter("Storing Mode", MLSTooltipManager.MainComponent.Tabs.Storing),
                                    GUILayout.MinWidth(200));
                                activeSwitcherInstance.storingMode = (MagicLightmapSwitcher.StoringMode)
                                    EditorGUILayout.EnumPopup(activeSwitcherInstance.storingMode, GUILayout.MaxWidth(250));
                            }

                            GUILayout.Label("Presets", MLSEditorUtils.caption_1_Style);

                            if (activeSwitcherInstance.lightingPresets.Count > 0)
                            {
                                if (GUILayout.Button("Go To Preset Manager"))
                                {
                                    DestroyImmediate(MLSPresetManager.presetsManagerWindow);
                                    MLSPresetManager.targetScene = EditorSceneManager.GetSceneAt(selectedScene).name;
                                    MLSPresetManager.Init();
                                }
                            }

                            using (new GUILayout.VerticalScope(GUI.skin.box))
                            {
                                if (activeSwitcherInstance.lightingPresets.Count > 0)
                                {
                                    for (int i = 0; i < activeSwitcherInstance.lightingPresets.Count; i++)
                                    {
                                        using (new GUILayout.VerticalScope(GUI.skin.box))
                                        {
                                            using (new GUILayout.HorizontalScope())
                                            {
                                                activeSwitcherInstance.lightingPresets[i].included =
                                                    EditorGUILayout.Toggle(activeSwitcherInstance.lightingPresets[i].included, GUILayout.MaxWidth(20));

                                                if (activeSwitcherInstance.lightingPresets[i].included)
                                                {
                                                    GUI.enabled = true;
                                                }
                                                else
                                                {
                                                    GUI.enabled = false;
                                                }

                                                GUILayout.Label(activeSwitcherInstance.lightingPresets[i].name, GUILayout.MinWidth(190));

                                                GUI.enabled = true;

                                                if (MLSPresetManager.presetsManagerWindow != null)
                                                {
                                                    GUI.enabled = false;
                                                }

                                                using (new GUILayout.HorizontalScope(GUILayout.MaxWidth(235)))
                                                {
                                                    if (GUILayout.Button("Load", GUILayout.MinWidth(50), GUILayout.MaxWidth(80)))
                                                    {
                                                        activeSwitcherInstance.lightingPresets[i].MatchSceneSettings();
                                                    }

                                                    if (GUILayout.Button("Edit", GUILayout.MinWidth(50), GUILayout.MaxWidth(80)))
                                                    {
                                                        if (MLSPresetManager.presetsManagerWindow == null)
                                                        {
                                                            DestroyImmediate(MLSPresetManager.presetsManagerWindow);
                                                            MLSPresetManager.targetScene = EditorSceneManager.GetSceneAt(selectedScene).name;
                                                            MLSPresetManager.directEditing = true;
                                                            MLSPresetManager.setActivePreset = i;
                                                            MLSPresetManager.presetName = activeSwitcherInstance.lightingPresets[i].name;
                                                            MLSPresetManager.Init();
                                                        }
                                                    }

                                                    if (GUILayout.Button("Remove", GUILayout.MinWidth(50), GUILayout.MaxWidth(80)))
                                                    {
                                                        MLSPresetManager.RemoveLightingPresetFromQueue(activeSwitcherInstance, i);
                                                    }
                                                }

                                                GUI.enabled = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    EditorGUILayout.HelpBox("You don't have scene lighting presets yet.", MessageType.Warning, true);
                                }

                                GUILayout.Space(5);

                                using (new GUILayout.HorizontalScope())
                                {
                                    GUILayout.FlexibleSpace();

                                    if (GUILayout.Button("Create New...", GUILayout.MaxWidth(240)))
                                    {
                                        MLSPresetManager.CreateNewPreset(activeSwitcherInstance);

                                        if (MLSPresetManager.presetsManagerWindow == null)
                                        {
                                            DestroyImmediate(MLSPresetManager.presetsManagerWindow);
                                            MLSPresetManager.targetScene = EditorSceneManager.GetSceneAt(selectedScene).name;
                                            MLSPresetManager.directEditing = true;
                                            MLSPresetManager.setActivePreset = activeSwitcherInstance.lightingPresets.Count - 1;
                                            MLSPresetManager.Init();
                                        }
                                    }
                                }
                            }

                            //using (new GUILayout.HorizontalScope())
                            //{
                            //    GUILayout.Label(
                            //        MLSTooltipManager.MainComponent.GetParameter("Storage Type", MLSTooltipManager.MainComponent.Tabs.Storing),
                            //        GUILayout.MinWidth(200));
                            //    magicLightmapSwitcher.storageType = (MagicLightmapSwitcher.StorageType)
                            //        EditorGUILayout.EnumPopup(magicLightmapSwitcher.storageType, GUILayout.MaxWidth(250));
                            //}

                            switch (activeSwitcherInstance.storingMode)
                            {
                                case MagicLightmapSwitcher.StoringMode.Once:
                                    //GUILayout.Label("Baked Groups", MLSEditorUtils.captionStyle);

                                    //using (new GUILayout.VerticalScope())
                                    //{
                                    //    if (magicLightmapSwitcher.bakedGroup.Count > 0)
                                    //    {
                                    //        using (new GUILayout.VerticalScope())
                                    //        {
                                    //            for (int i = 0; i < magicLightmapSwitcher.bakedGroup.Count; i++)
                                    //            {
                                    //                using (new GUILayout.HorizontalScope())
                                    //                {
                                    //                    if (magicLightmapSwitcher.bakedGroup[i].rootObject != null)
                                    //                    {
                                    //                        GUILayout.Label(magicLightmapSwitcher.bakedGroup[i].rootObject.name, GUILayout.MinWidth(200));
                                    //                        magicLightmapSwitcher.bakedGroup[i].rootObject = EditorGUILayout.ObjectField(magicLightmapSwitcher.bakedGroup[i].rootObject, typeof(GameObject), true) as GameObject;
                                    //                    }
                                    //                    else
                                    //                    {
                                    //                        GUILayout.Label("New Objects Group", GUILayout.MinWidth(200));
                                    //                        magicLightmapSwitcher.bakedGroup[i].rootObject = EditorGUILayout.ObjectField(magicLightmapSwitcher.bakedGroup[i].rootObject, typeof(GameObject), true) as GameObject;
                                    //                    }

                                    //                    if (GUILayout.Button("Remove", GUILayout.MinWidth(50), GUILayout.MaxWidth(80)))
                                    //                    {
                                    //                        magicLightmapSwitcher.bakedGroup.RemoveAt(i);
                                    //                        return;
                                    //                    }
                                    //                }

                                    //                GUILayout.Space(5);

                                    //                GUILayout.Label("Affected Objects", MLSEditorUtils.caption_1_Style);

                                    //                if (magicLightmapSwitcher.bakedGroup[i].affectedObjects.Count > 0)
                                    //                {
                                    //                    for (int j = 0; j < magicLightmapSwitcher.bakedGroup[i].affectedObjects.Count; j++)
                                    //                    {
                                    //                        using (new GUILayout.HorizontalScope())
                                    //                        {
                                    //                            if (magicLightmapSwitcher.bakedGroup[i].affectedObjects[j] != null)
                                    //                            {
                                    //                                GUILayout.Label(magicLightmapSwitcher.bakedGroup[i].affectedObjects[j].name);
                                    //                            }
                                    //                            else
                                    //                            {
                                    //                                GUILayout.Label("New Affected Object");
                                    //                            }

                                    //                            magicLightmapSwitcher.bakedGroup[i].affectedObjects[j] = EditorGUILayout.ObjectField(magicLightmapSwitcher.bakedGroup[i].affectedObjects[j], typeof(GameObject), true) as GameObject;
                                    //                        }
                                    //                    }
                                    //                }
                                    //                else
                                    //                {
                                    //                    GUILayout.Label("No lights in Baked Group");
                                    //                }

                                    //                using (new GUILayout.HorizontalScope())
                                    //                {
                                    //                    GUILayout.FlexibleSpace();

                                    //                    if (GUILayout.Button("Add", GUILayout.MinWidth(50), GUILayout.MaxWidth(50)))
                                    //                    {
                                    //                        magicLightmapSwitcher.bakedGroup[i].affectedObjects.Add(null);
                                    //                        return;
                                    //                    }
                                    //                }                                                    

                                    //                if (magicLightmapSwitcher.bakedGroup[i].rootObject != null)
                                    //                {
                                    //                    GUILayout.Label("Affected Lights", MLSEditorUtils.caption_1_Style);

                                    //                    Light[] bakedGroupLights = magicLightmapSwitcher.bakedGroup[i].rootObject.GetComponentsInChildren<Light>();

                                    //                    if (bakedGroupLights.Length > 0)
                                    //                    {
                                    //                        for (int j = 0; j < bakedGroupLights.Length; j++)
                                    //                        {
                                    //                            using (new GUILayout.VerticalScope())
                                    //                            {
                                    //                                GUILayout.Label(bakedGroupLights[j].name);

                                    //                                if (!magicLightmapSwitcher.bakedGroup[i].affectedLights.Contains(bakedGroupLights[j]))
                                    //                                {
                                    //                                    magicLightmapSwitcher.bakedGroup[i].affectedLights.Add(bakedGroupLights[j]);
                                    //                                }
                                    //                            }
                                    //                        }
                                    //                    }
                                    //                    else
                                    //                    {
                                    //                        GUILayout.Label("No lights in Baked Group");
                                    //                    }
                                    //                }
                                    //            }
                                    //        }
                                    //    }

                                    //    GUILayout.Space(5);

                                    //    using (new GUILayout.HorizontalScope())
                                    //    {
                                    //        GUILayout.FlexibleSpace();

                                    //        if (GUILayout.Button("Add", GUILayout.MinWidth(50), GUILayout.MaxWidth(50)))
                                    //        {
                                    //            magicLightmapSwitcher.bakedGroup.Add(null);
                                    //            return;
                                    //        }
                                    //    }
                                    //}

                                    GUILayout.Space(5);
                                    GUILayout.Label("Baking", MLSEditorUtils.caption_1_Style);

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Lightmap Name", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(190));
                                        lightmapName = GUILayout.TextField(lightmapName, GUILayout.MaxWidth(243));
                                    }

                                    break;
                                case MagicLightmapSwitcher.StoringMode.Queue:
                                    GUILayout.Label("Baking", MLSEditorUtils.captionStyle);

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Create Lightmap Scenario", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                        createLightmapScenario = EditorGUILayout.Toggle(createLightmapScenario, GUILayout.MaxWidth(240));
                                    }

                                    if (createLightmapScenario)
                                    {
                                        if (activeSwitcherInstance.availableScenarios.Count > 0)
                                        {
                                            using (new GUILayout.HorizontalScope())
                                            {
                                                GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Scenario To Replace Data", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                                scenarioToChange = EditorGUILayout.Popup(scenarioToChange, storedScenarios.ToArray(), GUILayout.MaxWidth(240));
                                            }
                                        }
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Clear Default Data Folder", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                        clearDefaultDataFolder = EditorGUILayout.Toggle(clearDefaultDataFolder, GUILayout.MaxWidth(240));
                                    }

                                    if (lastClearDefaultDataFolderValue != clearDefaultDataFolder)
                                    {
                                        if (clearDefaultDataFolder)
                                        {
                                            if (!EditorUtility.DisplayDialog("Magic Lightmap Switcher",
                                                "When this option is enabled, the system automatically " +
                                                "removes copies of lightmaps from the default Unity folder. " +
                                                "This is useful for final baking, however, during testing this " +
                                                "will make it impossible to view lightmaps on objects and " +
                                                "different modes in the editor.", "I understand", "Cancel"))
                                            {
                                                clearDefaultDataFolder = false;
                                            }
                                        }

                                        lastClearDefaultDataFolderValue = clearDefaultDataFolder;
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Store Path Mode", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                        storePath = (StorePath) EditorGUILayout.EnumPopup(storePath, GUILayout.MaxWidth(240));
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        if (storePath == StorePath.Custom)
                                        {
                                            GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Custom Path", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                            GUILayout.FlexibleSpace();
                                            GUILayout.Label("Assets/");
                                            customPath = GUILayout.TextField(customPath, GUILayout.MaxWidth(240));
                                        }
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Load From Asset Bundles", MLSTooltipManager.MainComponent.Tabs.Storing), GUILayout.MinWidth(180));
                                        activeSwitcherInstance.loadFromAssetBundles = EditorGUILayout.Toggle(activeSwitcherInstance.loadFromAssetBundles, GUILayout.MaxWidth(240));
                                    }
                                    break;
                            }
                        }
                    }

                    using (new GUILayout.VerticalScope(GUI.skin.box))
                    {
                        switch (activeSwitcherInstance.storingMode)
                        {
                            case MagicLightmapSwitcher.StoringMode.Once:
                                using (new GUILayout.HorizontalScope())
                                {
                                    if (MLSLightmapDataStoring.bakingLightingData)
                                    {
                                        if (MLSLightmapDataStoring.waitingForAllAssetsImported)
                                        {
                                            GUILayout.Button("Importing Assets...", GUILayout.MinWidth(150));
                                        }
                                        else
                                        {
                                            GUI.enabled = true;

                                            if (GUILayout.Button("Force Stop", GUILayout.MinWidth(150)))
                                            {
                                                MLSLightmapDataStoring.bakingLightingData = false;
                                                MLSLightmapDataStoring.bakingLightingDataRoutine = null;
                                                EditorApplication.update -= MLSLightmapDataStoring.BakeAndStoreIteratorUpdate;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (MLSLightmapDataStoring.storingLightingData)
                                        {
                                            if (GUILayout.Button("Stop Storing", GUILayout.MinWidth(150)))
                                            {
                                                MLSLightmapDataStoring.StopStoring();
                                            }
                                        }
                                        else
                                        {
                                            if (LightmapSettings.lightmaps.Length == 0)
                                            {
                                                GUI.enabled = false;
                                            }

                                            if (GUILayout.Button("Store Baked Lightmap", GUILayout.MinWidth(150)))
                                            {
                                                if (string.IsNullOrEmpty(lightmapName))
                                                {
                                                    if (EditorUtility.DisplayDialog("Magic Lightmap Switcher", "Please enter a lightmap name.", "OK"))
                                                    {
                                                        return;
                                                    }
                                                }

                                                if (activeSwitcherInstance.sceneLightmapDatas.Find(item => item.dataName == lightmapName))
                                                {
                                                    if (EditorUtility.DisplayDialog("Magic Lightmap Switcher", "A lightmap with this name already exists. Overwrite data?", "Yes", "No"))
                                                    {
                                                        MLSLightmapDataStoring.StartStoringProcess(activeSwitcherInstance, lightmapName, true);
                                                    }
                                                    else
                                                    {
                                                        return;
                                                    }
                                                }
                                                else
                                                {
                                                    MLSLightmapDataStoring.StartStoringProcess(activeSwitcherInstance, lightmapName, true);
                                                }
                                            }
                                        }

                                        GUI.enabled = true;

                                        if (GUILayout.Button("Bake And Store Lightmap", GUILayout.MinWidth(150)))
                                        {
                                            if (string.IsNullOrEmpty(lightmapName))
                                            {
                                                if (EditorUtility.DisplayDialog("Magic Lightmap Switcher", "Please enter a lightmap name.", "OK"))
                                                {
                                                    return;
                                                }
                                            }

                                            MLSLightmapDataStoring.StartBakeStoringProcess(lightmapName);
                                        }
                                    }
                                }
                                break;
                            case MagicLightmapSwitcher.StoringMode.Queue:
                                if (activeSwitcherInstance.lightingPresets.Count == 0)
                                {
                                    GUI.enabled = false;

                                    GUILayout.Button("Bake And Store Lightmaps Queue", GUILayout.MinWidth(150));
                                }
                                else
                                {
                                    if (!MLSLightmapDataStoring.bakingLightingDataQueue)
                                    {
                                        using (new EditorGUILayout.HorizontalScope())
                                        {
                                            if (GUILayout.Button("Bake And Store Lightmaps Queue", GUILayout.MinWidth(150)))
                                            {
                                                MLSLightmapDataStoring.StartBakeStoringProcessQueue(activeSwitcherInstance, createLightmapScenario);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (GUILayout.Button("Stop Baking Process (Current: " + MLSLightmapDataStoring.currentBakingPreset + ")", GUILayout.MinWidth(150)))
                                        {
                                            MLSLightmapDataStoring.StopBakingQueue();
                                        }
                                    }
                                }
                                break;
                        }

                        if (MLSLightmapDataStoring.storingLightingData)
                        {
                            MLSProgressBarHelper.DrawTwoLineProgressBar(MLSLightmapDataStoring.storingStages.Count);
                        }

                        GUILayout.Space(10);

                        using (new GUILayout.VerticalScope(GUI.skin.box))
                        {
                            List<StoredLightmapData> currentStoredData = new List<StoredLightmapData>();

                            if (activeSwitcherInstance.workflow == MagicLightmapSwitcher.Workflow.MultiScene)
                            {
                                activeSwitcherInstance.storedLightmapDatas.TryGetValue(SceneManager.GetSceneAt(selectedScene).name, out currentStoredData);
                            }
                            else
                            {
                                currentStoredData = activeSwitcherInstance.sceneLightmapDatas;
                            }

                            if (currentStoredData != null && currentStoredData.Count > 0)
                            {
                                GUI.enabled = true;

                                GUILayout.Label("Stored Lightmaps", MLSEditorUtils.captionStyle);

                                using (new GUILayout.VerticalScope(GUI.skin.box))
                                {
                                    for (int i = 0; i < currentStoredData.Count; i++)
                                    {
                                        if (currentStoredData[i] == null)
                                        {
                                            currentStoredData.RemoveAt(i);
                                            break;
                                        }
                                        else if (currentStoredData[i].name.Contains(SceneManager.GetSceneAt(selectedScene).name))
                                        {
                                            using (new GUILayout.HorizontalScope())
                                            {
                                                GUILayout.Label(currentStoredData[i].sceneLightingData.lightmapName, GUILayout.MinWidth(200));

                                                if (GUILayout.Button("Remove"))
                                                {
                                                    RemoveStoredLightmapData(currentStoredData[i]);
                                                    currentStoredData.RemoveAt(i);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                GUI.enabled = true;

                                if (MLSLightmapDataStoring.bakingLightingDataQueue)
                                {
                                    EditorGUILayout.HelpBox("The list will be available after completing the baking and storing process.", MessageType.Warning, true);
                                }
                                else
                                {
                                    EditorGUILayout.HelpBox("You don't have stored lightmaps yet.", MessageType.Warning, true);
                                }
                            }
                        }
                    }
                    break;                
                case 1:
                    if (MLSLightmapDataStoring.bakingLightingData || MLSLightmapDataStoring.bakingLightingDataQueue)
                    {
                        EditorGUILayout.HelpBox("Access to settings is locked while baking and storing lightmaps.", MessageType.Warning);
                    }
                    else
                    {
                        if (activeSwitcherInstance == null)
                        {
                            DrawNoInstanceWarning();
                            return;
                        }

                        DrawSwitchingBlendingSection(activeSwitcherInstance);
                    }
                    break;
            }
        }

        private static void DrawNoInstanceWarning()
        {
            EditorGUILayout.HelpBox("The selected scene does not contain a Magic Lightmap Switcher instance.", MessageType.Warning);

            if (GUILayout.Button("Add Instance"))
            {
                GameObject magicLightmapSwitcherMain = new GameObject("Magic Lightmap Switcher", typeof(MagicLightmapSwitcher));
                Transform resultParent = null;

                var rootObjects = Resources.FindObjectsOfTypeAll<GameObject>().Where(obj => obj.name == "Magic Tools");

                for (int i = 0; i < rootObjects.Count(); i++)
                {
                    if (rootObjects.ElementAt(i).gameObject.scene.name == SceneManager.GetSceneAt(selectedScene).name)
                    {
                        resultParent = rootObjects.ElementAt(i).gameObject.transform;

                    }
                }

                if (resultParent != null)
                {
                    magicLightmapSwitcherMain.transform.parent = resultParent;
                }
                else
                {
                    GameObject magicToolsObject = GameObject.Find("Magic Tools");

                    if (magicToolsObject == null)
                    {
                        magicToolsObject = new GameObject("Magic Tools");
                    }

                    magicLightmapSwitcherMain.transform.parent = magicToolsObject.transform;
                }
            }
        }
        
        #if BAKERY_INCLUDED
        static ftLightmapsStorage bakeryStorage;
        #endif

        public static void DrawSwitchingBlendingSection(MagicLightmapSwitcher activeInstance)
        {
            if (MLSLightmapDataStoring.bakingLightingData)
            {
                GUI.enabled = false;
            }
            
            GUILayout.Label("Global Settings", MLSEditorUtils.captionStyle);

            using (new GUILayout.VerticalScope(GUI.skin.box))
            {
                if (SystemInfo.supports2DArrayTextures)
                {
                    using (new GUILayout.HorizontalScope())
                    {
                        GUILayout.Label(
                            MLSTooltipManager.MainComponent.GetParameter("Use Texture2D Arrays",
                                MLSTooltipManager.MainComponent.Tabs.Storing),
                            GUILayout.MinWidth(200));
                        activeInstance.useTexture2DArrays =
                            GUILayout.Toggle(activeInstance.useTexture2DArrays, "", GUILayout.MaxWidth(250));
                    }
                }

                if (SystemInfo.supportsCubemapArrayTextures)
                {
                    using (new GUILayout.HorizontalScope())
                    {
                        GUILayout.Label(
                            MLSTooltipManager.MainComponent.GetParameter("Use TextureCube Arrays",
                                MLSTooltipManager.MainComponent.Tabs.Storing),
                            GUILayout.MinWidth(200));
                        activeInstance.useTextureCubeArrays =
                            GUILayout.Toggle(activeInstance.useTextureCubeArrays, "", GUILayout.MaxWidth(250));
                    }
                }

                if (activeInstance.useTexture2DArrays || activeInstance.useTextureCubeArrays)
                {
#if BAKERY_INCLUDED
                    if (bakeryStorage == null)
                    {
                        bakeryStorage = ftRenderLightmap.FindRenderSettingsStorage();
                    }
                        
                    if (bakeryStorage.renderSettingsMinAutoResolution != bakeryStorage.renderSettingsMaxAutoResolution && 
                        activeInstance.lightmapper == MagicLightmapSwitcher.Lightmapper.BakeryLightmapper)
                    {
                        EditorGUILayout.HelpBox("You are using texture arrays, this requires the same " +
                                                "atlas size for all lightmaps. You are currently using " +
                                                "Bakery, which uses the dynamic resolution of the lightmap " +
                                                "texture atlas. Set the same Min and Max resolution.", 
                            MessageType.Error);
                    }
                    else
#endif
                    {
                        if (activeInstance.useTexture2DArrays)
                        {
                            Shader.EnableKeyword("MLS_TEXTURE2D_ARRAYS_ON");
                            Shader.DisableKeyword("MLS_TEXTURE2D_ARRAYS_OFF");
                        }
                        else
                        {
                            Shader.EnableKeyword("MLS_TEXTURE2D_ARRAYS_OFF");
                            Shader.DisableKeyword("MLS_TEXTURE2D_ARRAYS_ON");
                        }
                        
                        if (activeInstance.useTextureCubeArrays)
                        {
                            Shader.EnableKeyword("MLS_TEXTURECUBE_ARRAYS_ON");
                            Shader.DisableKeyword("MLS_TEXTURECUBE_ARRAYS_OFF");
                        }
                        else
                        {
                            Shader.EnableKeyword("MLS_TEXTURECUBE_ARRAYS_OFF");
                            Shader.DisableKeyword("MLS_TEXTURECUBE_ARRAYS_ON");
                        }
                    }
                }

                using (new GUILayout.HorizontalScope())
                {
                    GUILayout.FlexibleSpace();

                    if (GUILayout.Button("Create New..."))
                    {
                        MLSLightmapDataStoring.CreateLightmapScenario(activeInstance, "New Lightmap Scenario_" + activeInstance.availableScenarios.Count);
                    }
                }

                using (new GUILayout.VerticalScope(GUI.skin.box))
                {
                    GUILayout.Label("Lighting Scenarios", MLSEditorUtils.captionStyle);

                    List<StoredLightingScenario> scenarios = new List<StoredLightingScenario>();

                    if (activeInstance.workflow == MagicLightmapSwitcher.Workflow.MultiScene)
                    {
                        activeInstance.storedLightmapScenarios.TryGetValue(EditorSceneManager.GetSceneAt(MLSManager.selectedScene).name, out scenarios);
                    }
                    else
                    {
                        scenarios = activeInstance.sceneLightmapScenarios;
                    }

                    if (scenarios != null && scenarios.Count > 0)
                    {
                        scenariosScrollPosition = GUILayout.BeginScrollView(scenariosScrollPosition);

                        for (int i = 0; i < scenarios.Count; i++)
                        {
                            if (scenarios[i] == null)
                            {
                                scenarios.RemoveAt(i);
                                break; 
                            }

                            if (MLSEditorUtils.DrawHeader(scenarios[i].prefix + scenarios[i].scenarioName, true, new Color(0.3f, 0.3f, 0.3f, 1), scenarios, i))
                            {
                                EditorGUI.BeginChangeCheck();

                                using (new GUILayout.VerticalScope(GUI.skin.box))
                                {
                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(
                                            MLSTooltipManager.MainComponent.GetParameter("Scenario Name", MLSTooltipManager.MainComponent.Tabs.LightmapScenario),
                                            GUILayout.MaxWidth(200));

                                        GUILayout.FlexibleSpace();

                                        GUILayout.Label(scenarios[i].prefix);

                                        EditorGUI.BeginChangeCheck();

                                        Undo.RecordObject(scenarios[i], "Set Lighting Scenario Name");

                                        scenarios[i].scenarioName =
                                            GUILayout.TextField(scenarios[i].scenarioName, GUILayout.MaxWidth(250));

                                        if (string.IsNullOrEmpty(scenarios[i].scenarioName))
                                        {
                                            scenarios[i].scenarioName = "#" + scenarios.Count;
                                        }

                                        if (EditorGUI.EndChangeCheck())
                                        {
                                            EditorUtility.SetDirty(scenarios[i]);
                                        }
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        GUILayout.Label(MLSTooltipManager.MainComponent.GetParameter("Blending Modules", MLSTooltipManager.MainComponent.Tabs.LightmapScenario), GUILayout.MinWidth(200));
                                        scenarios[i].blendingModules = EditorGUILayout.MaskField(scenarios[i].blendingModules, blendingModules, GUILayout.MaxWidth(250));
                                    }

                                    using (new GUILayout.HorizontalScope())
                                    {
                                        EditorGUI.BeginChangeCheck();

                                        GUILayout.Label(
                                        MLSTooltipManager.MainComponent.GetParameter("Cyclic Blend", MLSTooltipManager.MainComponent.Tabs.LightmapScenario),
                                        GUILayout.MinWidth(200));

                                        scenarios[i].cyclic =
                                            EditorGUILayout.Toggle(scenarios[i].cyclic, GUILayout.MaxWidth(250));

                                        if (EditorGUI.EndChangeCheck())
                                        {
                                            if (scenarios[i].blendableLightmaps.Count > 0)
                                            {
                                                scenarios[i].RebuildSourceList();
                                            }
                                            else
                                            {
                                                scenarios[i].cyclic = false;
                                                EditorDisplayMessages.ShowMessage("The \"Blending Order\" must contain at least one lightmap to use this option.");
                                            }
                                        }
                                    }

                                    GUILayout.Label("Blendable Lightmaps Queue", MLSEditorUtils.caption_1_Style);                                    

                                    if (scenarios[i].scenarioSerializedObject == null)
                                    {
                                        scenarios[i].BuildReorderableList();
                                    }

                                    scenarios[i].scenarioSerializedObject.Update();
                                    scenarios[i].reorderableStoredLightmapDatas.DoLayoutList();
                                    scenarios[i].scenarioSerializedObject.ApplyModifiedProperties();

                                    if (!scenarios[i].selfTestSuccess)
                                    {
                                        EditorGUILayout.HelpBox("An error was detected in the stored lightmap data. " +
                                            "Try reassigning the data in the blending queue.", MessageType.Error);

                                        scenarios[i].SelfTest();
                                    }
                                    else
                                    {

                                        if (scenarios[i].blendableLightmaps.Count != scenarios[i].lastBlendableLightmapsCount || 
                                            scenarios[i].collectedCustomBlendableDatas.Count == 0 ||
                                            scenarios[i].orderChanged)
                                        {
                                            scenarios[i].orderChanged = false;
                                            scenarios[i].lastBlendableLightmapsCount = scenarios[i].blendableLightmaps.Count;
                                            scenarios[i].SynchronizeCustomBlendableData(true);
                                        }

                                        GUILayout.Space(5);

                                        using (new GUILayout.VerticalScope(GUI.skin.box))
                                        {
                                            if (scenarios[i].reorderableStoredLightmapDatas.count > 0)
                                            {
                                                if (scenarios[i].blendableLightmaps.Count > 1)
                                                {
                                                    if (scenarios[i].collectedCustomBlendableDatas.Count == 0 ||
                                                            scenarios[i].collectedCustomBlendableDatas.Find(item => item.sourceScript == null) != null)
                                                    {
                                                        scenarios[i].SynchronizeCustomBlendableData();
                                                    }

                                                    if (scenarios[i].collectedCustomBlendableDatas.Count > 0)
                                                    {
                                                        GUILayout.Label("Custom Blendable Data", MLSEditorUtils.captionStyle);
                                                        for (int cb = 0; cb < scenarios[i].collectedCustomBlendableDatas.Count; cb++)
                                                        {
                                                            string headerName =  scenarios[i].collectedCustomBlendableDatas[cb].sourceScriptName;

                                                            scenarios[i].collectedCustomBlendableDatas[cb].foldoutEnabled =
                                                                EditorGUILayout.Foldout(scenarios[i].collectedCustomBlendableDatas[cb].foldoutEnabled, headerName, true);

                                                            if (scenarios[i].collectedCustomBlendableDatas[cb].foldoutEnabled)
                                                            {
                                                                GUI.backgroundColor = Color.gray;

                                                                using (new GUILayout.VerticalScope(GUI.skin.box))
                                                                {
                                                                    if (scenarios[i].collectedCustomBlendableDatas[cb].blendableFloatFieldsDatas.Count > 0)
                                                                    {
                                                                        GUILayout.Label("Blendable Floats", MLSEditorUtils.caption_1_Style);

                                                                        for (int bv = 0; bv < scenarios[i].collectedCustomBlendableDatas[cb].blendableFloatFieldsDatas.Count; bv++)
                                                                        {
                                                                            DrawCustomBlendableValues(
                                                                                scenarios[i],
                                                                                scenarios[i].collectedCustomBlendableDatas[cb],
                                                                                bv,
                                                                                0);
                                                                        }
                                                                    }

                                                                    if (scenarios[i].collectedCustomBlendableDatas[cb].blendableColorFieldsDatas.Count > 0)
                                                                    {
                                                                        GUILayout.Label("Blendable Colors", MLSEditorUtils.caption_1_Style);

                                                                        for (int bv = 0; bv < scenarios[i].collectedCustomBlendableDatas[cb].blendableColorFieldsDatas.Count; bv++)
                                                                        {
                                                                            DrawCustomBlendableValues(
                                                                                scenarios[i],
                                                                                scenarios[i].collectedCustomBlendableDatas[cb],
                                                                                bv,
                                                                                1);
                                                                        }
                                                                    }

                                                                    if (scenarios[i].collectedCustomBlendableDatas[cb].blendableCubemapFieldsDatas.Count > 0)
                                                                    {
                                                                        GUILayout.Label("Blendable Cubemaps", MLSEditorUtils.caption_1_Style);

                                                                        for (int bv = 0; bv < scenarios[i].collectedCustomBlendableDatas[cb].blendableCubemapFieldsDatas.Count; bv++)
                                                                        {
                                                                            DrawCustomBlendableValues(
                                                                                scenarios[i],
                                                                                scenarios[i].collectedCustomBlendableDatas[cb],
                                                                                bv,
                                                                                2);
                                                                        }
                                                                    }
                                                                }

                                                                GUI.backgroundColor = GUI.contentColor;
                                                            }
                                                        }
                                                    }

                                                    if (!shadersChecked)
                                                    {
                                                        shadersChecked = true;
                                                        MLSShaderCodeModifier.Initialize();
                                                    }

                                                    if (activeSwitcherInstance == null)
                                                    {
                                                        activeSwitcherInstance = RuntimeAPI.GetSwitcherInstanceStatic(SceneManager.GetSceneAt(selectedScene).name);
                                                    }

                                                    if (!activeSwitcherInstance.systemProperties.useSwitchingOnly &&
                                                        !activeSwitcherInstance.systemProperties.standardRPPatched &&
                                                        !activeSwitcherInstance.systemProperties.universalRPPatched &&
                                                        !activeSwitcherInstance.systemProperties.highDefinitionRPPatched)
                                                    {
                                                        shadersChecked = false;

                                                        EditorGUILayout.HelpBox(
                                                            "In order for lightmap blending to work, " +
                                                            "you need to modify the shaders. \r\n \r\n" +
                                                            "Use the menu item Tools -> Magic Tools -> Magic Lightmap Switcher -> Prepare Shaders", MessageType.Error);

                                                        using (new GUILayout.HorizontalScope())
                                                        {
                                                            GUILayout.FlexibleSpace();

                                                            if (GUILayout.Button("Use Switching Only"))
                                                            {
                                                                activeSwitcherInstance.systemProperties.useSwitchingOnly = true;
                                                            }
                                                        }

                                                        GUI.enabled = false;
                                                    }
                                                    else if(!activeSwitcherInstance.systemProperties.useSwitchingOnly)
                                                    {
                                                        GUILayout.Label("Blending Configurator", MLSEditorUtils.captionStyle);

                                                        MLSEditorUtils.DrawBlendingConfigurator(activeInstance, scenarios[i]);

                                                        if (GUILayout.Button("Open Blending Configurator"))
                                                        {
                                                            MLSBlendingConfigurator.targetScene = scenarios[i].targetScene;
                                                            MLSBlendingConfigurator.Init();
                                                        }

#if !MT_HDRP_7_INCLUDED && !MT_HDRP_8_INCLUDED && !MT_HDRP_9_INCLUDED && !MT_HDRP_10_INCLUDED && !MT_HDRP_11_INCLUDED && !MT_HDRP_12_INCLUDED
                                                        if (!activeSwitcherInstance.systemProperties.deferredWarningConfirmed)
                                                        {
                                                            if (Camera.main != null && Camera.main.actualRenderingPath == RenderingPath.DeferredShading)
                                                            {
                                                                EditorGUILayout.HelpBox("" +
                                                                    "At the moment, the plugin does not support blending and switching " +
                                                                    "of deferred reflections. For reflections to work properly in deferred mode, " +
                                                                    "go to graphics settings and set the \"Deferred Reflections\" option to \"No Support\".\r\n" +
                                                                    "(Project Settings -> Graphics -> Buil-In Shader Settings)\r\n\r\n" +
                                                                    "After this action, a restart of the editor is required.", MessageType.Warning, true);

                                                                using (new GUILayout.HorizontalScope())
                                                                {
                                                                    GUILayout.FlexibleSpace();

                                                                    if (GUILayout.Button("Got It"))
                                                                    {
                                                                        activeSwitcherInstance.systemProperties.deferredWarningConfirmed = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Camera.main.renderingPath != RenderingPath.DeferredShading)
                                                            {
                                                                activeSwitcherInstance.systemProperties.deferredWarningConfirmed = false;
                                                            }
                                                        }
#endif
                                                    }
                                                    else
                                                    {
                                                        EditorGUILayout.HelpBox(
                                                            "The plugin works only in the lightmap switching mode.\r\n" +
                                                            "To activate the blending functionality, patch the shaders.\r\n \r\n" +
                                                            "Use the menu item Tools -> Magic Tools -> Magic Lightmap Switcher -> Prepare Shaders", MessageType.Info);
                                                    }
                                                }
                                                else
                                                {
                                                    EditorGUILayout.HelpBox("Only one lightmap is added, blending is not possible.", MessageType.Warning, true);
                                                }
                                            }
                                            else
                                            {
                                                EditorGUILayout.HelpBox("No blendable lightmaps added.", MessageType.Warning, true);                                                
                                            }
                                        }
                                    }
                                }

                                GUILayout.Label("Events", MLSEditorUtils.captionStyle);

                                activeInstance.switcherSerializedObject.Update();

                                SerializedProperty onBlendingValueChangedArray = activeInstance.switcherSerializedObject.FindProperty("OnBlendingValueChanged");
                                SerializedProperty onLoadedLightmapChangedArray = activeInstance.switcherSerializedObject.FindProperty("OnLoadedLightmapChanged");

                                if (onBlendingValueChangedArray.arraySize > 0)
                                {
                                    SerializedProperty onBlendingValueChanged = onBlendingValueChangedArray.GetArrayElementAtIndex(i);
                                    EditorGUILayout.PropertyField(onBlendingValueChanged, new GUIContent("On Blending Value Changed"));
                                }

                                if (onLoadedLightmapChangedArray.arraySize > 0)
                                {
                                    SerializedProperty onLoadedLightmapChanged = onLoadedLightmapChangedArray.GetArrayElementAtIndex(i);
                                    EditorGUILayout.PropertyField(onLoadedLightmapChanged, new GUIContent("On Loaded Lightmap Changed"));
                                }

                                activeInstance.switcherSerializedObject.ApplyModifiedProperties();

                                if (EditorGUI.EndChangeCheck())
                                {
                                    EditorUtility.SetDirty(scenarios[i]);
                                }
                            }

                            GUILayout.Space(5f);

                            if (Event.current.commandName == "ObjectSelectorClosed" && targetScenario == scenarios[i].scenarioName)
                            {
                                StoredLightmapData selectedAsset = EditorGUIUtility.GetObjectPickerObject() as StoredLightmapData;

                                if (selectedAsset != null)
                                {
                                    scenarios[i].AddLightmapData(selectedAsset);
                                }
                            }
                        }

                        EditorGUILayout.EndScrollView();
                    }
                    else
                    {
                        EditorGUILayout.HelpBox("You don't have stored lightmap scenarios yet.", MessageType.Warning, true);  
                    }
                }
            }    
        }        

        private static void DrawCustomBlendableValues(StoredLightingScenario targetScenario, StoredLightingScenario.CollectedCustomBlendableData targetDataSet, int dataIndex, int flag)
        {
            if (flag == 0)
            {
                if (targetDataSet.blendableFloatFieldsDatas[dataIndex].sourceField == null)
                {
                    targetDataSet.sourceScript = null;
                    return;
                }

                string parameterName = "";

                parameterName =
                    targetDataSet.blendableFloatFieldsDatas[dataIndex].fieldName.Split(new char[] { '_' })[2] + " (Blend) " +
                    targetDataSet.blendableFloatFieldsDatas[dataIndex].sourceField.GetValue(targetDataSet.sourceScript).ToString();

                using (new GUILayout.HorizontalScope())
                {
                    GUILayout.Label("Blending Sync", GUILayout.MaxWidth(150));
                    GUILayout.FlexibleSpace();
                    targetDataSet.blendableFloatFieldsDatas[dataIndex].blendingSynchMode =
                       (StoredLightingScenario.CollectedCustomBlendableData.BlendingSynchMode) EditorGUILayout.EnumPopup(targetDataSet.blendableFloatFieldsDatas[dataIndex].blendingSynchMode, GUILayout.MaxWidth(100));
                }

                GUILayout.Space(10);

                targetDataSet.blendableFloatFieldsDatas[dataIndex].foldoutEnabled =
                    EditorGUILayout.Foldout(targetDataSet.blendableFloatFieldsDatas[dataIndex].foldoutEnabled, parameterName, true);

                if (targetDataSet.blendableFloatFieldsDatas[dataIndex].foldoutEnabled)
                {
                    for (int j = 0; j < targetDataSet.blendableFloatFieldsDatas[dataIndex].dataVariants.Count; j++)
                    {
                        using (new GUILayout.VerticalScope(GUI.skin.box))
                        {
                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(targetDataSet.blendableFloatFieldsDatas[dataIndex].dataVariants[j].lightmapName + " -> ");
                                GUILayout.Label(targetDataSet.blendableFloatFieldsDatas[dataIndex].dataVariants[j].fieldValue.ToString());
                                GUILayout.FlexibleSpace();
                            }
                        }
                    }
                }
            }
            else if (flag == 1)
            {
                if (targetDataSet.blendableColorFieldsDatas[dataIndex].sourceField == null)
                {
                    targetDataSet.sourceScript = null;
                    return;
                }

                string parameterName = "";

                parameterName =
                    targetDataSet.blendableColorFieldsDatas[dataIndex].fieldName.Split(new char[] { '_' })[2] + " (Blend) " +
                    targetDataSet.blendableColorFieldsDatas[dataIndex].sourceField.GetValue(targetDataSet.sourceScript).ToString();

                using (new GUILayout.HorizontalScope())
                {
                    GUILayout.Label("Blending Sync", GUILayout.MaxWidth(150));
                    GUILayout.FlexibleSpace();
                    targetDataSet.blendableColorFieldsDatas[dataIndex].blendingSynchMode =
                       (StoredLightingScenario.CollectedCustomBlendableData.BlendingSynchMode) EditorGUILayout.EnumPopup(targetDataSet.blendableColorFieldsDatas[dataIndex].blendingSynchMode, GUILayout.MaxWidth(100));
                }

                GUILayout.Space(10);

                targetDataSet.blendableColorFieldsDatas[dataIndex].foldoutEnabled =
                    EditorGUILayout.Foldout(targetDataSet.blendableColorFieldsDatas[dataIndex].foldoutEnabled, parameterName, true);

                if (targetDataSet.blendableColorFieldsDatas[dataIndex].foldoutEnabled)
                {
                    for (int j = 0; j < targetDataSet.blendableColorFieldsDatas[dataIndex].dataVariants.Count; j++)
                    {
                        using (new GUILayout.VerticalScope(GUI.skin.box))
                        {
                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(targetDataSet.blendableColorFieldsDatas[dataIndex].dataVariants[j].lightmapName + " -> ", GUILayout.MinWidth(100));
                                EditorGUILayout.ColorField(targetDataSet.blendableColorFieldsDatas[dataIndex].dataVariants[j].fieldValue);
                            }
                        }
                    }
                }
            }
            else if (flag == 2)
            {
                if (targetDataSet.blendableCubemapFieldsDatas[dataIndex].sourceField == null)
                {
                    targetDataSet.sourceScript = null;
                    return;
                }

                string parameterName = "";

                parameterName =
                    targetDataSet.blendableCubemapFieldsDatas[dataIndex].fieldName.Split(new char[] { '_' })[2] + " (Blend) " +
                    targetDataSet.blendableCubemapFieldsDatas[dataIndex].sourceField.GetValue(targetDataSet.sourceScript).ToString();

                using (new GUILayout.HorizontalScope())
                {
                    GUILayout.Label("Blending Sync", GUILayout.MaxWidth(150));
                    GUILayout.FlexibleSpace();
                    targetDataSet.blendableCubemapFieldsDatas[dataIndex].blendingSynchMode =
                       (StoredLightingScenario.CollectedCustomBlendableData.BlendingSynchMode) EditorGUILayout.EnumPopup(targetDataSet.blendableCubemapFieldsDatas[dataIndex].blendingSynchMode, GUILayout.MaxWidth(100));
                }

                GUILayout.Space(10);

                targetDataSet.blendableCubemapFieldsDatas[dataIndex].foldoutEnabled =
                    EditorGUILayout.Foldout(targetDataSet.blendableCubemapFieldsDatas[dataIndex].foldoutEnabled, parameterName, true);

                if (targetDataSet.blendableCubemapFieldsDatas[dataIndex].foldoutEnabled)
                {
                    for (int j = 0; j < targetDataSet.blendableCubemapFieldsDatas[dataIndex].dataVariants.Count; j++)
                    {
                        using (new GUILayout.VerticalScope(GUI.skin.box))
                        {
                            using (new GUILayout.HorizontalScope())
                            {
                                GUILayout.Label(targetDataSet.blendableCubemapFieldsDatas[dataIndex].dataVariants[j].lightmapName + " -> ", GUILayout.MinWidth(100));
                                GUILayout.Label(targetDataSet.blendableCubemapFieldsDatas[dataIndex].dataVariants[j].fieldValue.ToString());
                            }
                        }
                    }
                }
            }
        }

        class AssetsControl : AssetPostprocessor
        {
            static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
            {

                MLSLightmapDataStoring.waitingForAssetImporting = false;
            }

            void OnPreprocessAsset()
            {
                MLSLightmapDataStoring.waitingForAssetImporting = true;
            }
        }

        public class EditorDisplayMessages : EditorWindow
        {
            public static void ShowMessage(string text)
            {
                EditorUtility.DisplayDialog("Magic Lightmap Switcher", text, "OK");
            }

            public static void ShowProgress(string action, float current, float total)
            {
                EditorUtility.DisplayProgressBar("Magic Lightmap Switcher", action, current / total);
            }

            public static void HideProgress()
            {
                EditorUtility.ClearProgressBar();
            }
        }
    }
}